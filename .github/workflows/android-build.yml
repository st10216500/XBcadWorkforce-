name: Android CI

on:
  push:
    branches:
      - master  # Run the workflow on pushes to the master branch
  pull_request:
    branches:
      - master  # Run on pull requests targeting the master branch

jobs:
  build:
    runs-on: ubuntu-latest  # Use Ubuntu for the build environment

    steps:
      # Step 1: Check out the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up JDK 17
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '17'  # Use Java 17
          distribution: 'temurin'

      # Step 3: Set up Android SDK
      - name: Set up Android SDK
        run: |
          mkdir -p $ANDROID_HOME
          echo "export ANDROID_HOME=/usr/local/lib/android-sdk" >> $GITHUB_ENV
          curl https://dl.google.com/android/repository/commandlinetools-linux-8092744_latest.zip -o commandlinetools.zip
          unzip commandlinetools.zip -d $ANDROID_HOME
          yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses
          $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager "platform-tools" "build-tools;30.0.3" "platforms;android-30"

      # Step 4: Make Gradle wrapper executable
      - name: Make Gradle Wrapper Executable
        run: chmod +x ./gradlew

      # Step 5: Cache Gradle dependencies
      - name: Cache Gradle dependencies
        uses: actions/cache@v2
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # Step 6: Build the project (with --continue to allow build despite lint issues)
      - name: Build with Gradle
        run: ./gradlew build --no-daemon --stacktrace --info --continue

      # Step 7: Run unit tests
      - name: Run Unit Tests
        run: ./gradlew test --no-daemon

